import time
import logging
from aiogram import Router
from aiogram.types import Message
from utils.storage import load_json, save_json
from utils.auth import login
from utils.parser import get_announcements
from utils.hashing import get_course_hash, get_course_hash_v1, matches_existing_hash
from utils.locks import get_lock
from config import USER_DATA_FILE, ANNOUNCEMENTS_FILE
from keyboards.reply import main_menu_keyboard, login_keyboard

router = Router()


async def check_and_notify(chat_id: int, bot):
    users = load_json(USER_DATA_FILE, {})
    user = users.get(str(chat_id))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not user or not user.get("subscriptions"):
        await bot.send_message(
            chat_id,
            "‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üìö –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å—ã¬ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            reply_markup=main_menu_keyboard()
        )
        return

    session = await login(user["username"], user["password"])
    if not session:
        logging.error(f"Auth failed for user {chat_id}")
        await bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!",
            reply_markup=main_menu_keyboard()
        )
        return

    any_new = False
    ann = load_json(ANNOUNCEMENTS_FILE, {})

    for course_name in user["subscriptions"]:
        url = user["available_courses"].get(course_name)
        if not url:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        anns = await get_announcements(session, url)
        if not anns:
            continue
        new_hash = get_course_hash(anns)

        # –í—Å—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥ –æ–¥–Ω–∏–º URL-–ª–æ–∫–æ–º
        url_lock = get_lock(f"url:{url}")
        async with url_lock:
            fresh_ann = load_json(ANNOUNCEMENTS_FILE, {})
            fresh_record = fresh_ann.get(url)
            
            # –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if fresh_record is None:
                fresh_ann[url] = {"page_hash": new_hash, "last_found": int(time.time())}
                save_json(ANNOUNCEMENTS_FILE, fresh_ann)
                # –ù–ï continue ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
            else:
                stored_hash = fresh_record.get("page_hash")
                
                # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ö–µ—à–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ö–µ–º—É ‚Äî –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if stored_hash and stored_hash == get_course_hash_v1(anns) and stored_hash != new_hash:
                    fresh_ann[url] = {"page_hash": new_hash, "last_found": int(time.time())}
                    save_json(ANNOUNCEMENTS_FILE, fresh_ann)
                    # –ù–ï continue ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # –†–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º
                elif not matches_existing_hash(anns, stored_hash):
                    any_new = True
                    fresh_ann[url] = {"page_hash": new_hash, "last_found": int(time.time())}
                    save_json(ANNOUNCEMENTS_FILE, fresh_ann)
                    await bot.send_message(chat_id, f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ¬´{course_name}¬ª!")

    await session.close()

    if not any_new:
        await bot.send_message(
            chat_id,
            "‚úÖ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.",
            reply_markup=main_menu_keyboard()
        )


@router.message(lambda m: m.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def manual_check(message: Message):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    users = load_json(USER_DATA_FILE, {})
    if str(message.chat.id) not in users:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login",
            reply_markup=login_keyboard()
        )
        return

    # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ–º –¥–≤–æ–π–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
    lock = get_lock(f"check:{message.chat.id}")
    if lock.locked():
        await message.answer("‚è≥ –£–∂–µ –ø—Ä–æ–≤–µ—Ä—è—é. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")
        return

    async with lock:
        await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
        await check_and_notify(message.chat.id, message.bot)