import time
import logging
from aiogram import Router
from aiogram.types import Message
from utils.storage import load_json, save_json
from utils.auth import login
from utils.parser import get_announcements
from utils.hashing import get_course_hash
from config import USER_DATA_FILE, ANNOUNCEMENTS_FILE
from keyboards.reply import main_menu_keyboard, login_keyboard

router = Router()


async def check_and_notify(chat_id: int, bot):
    users = load_json(USER_DATA_FILE, {})
    user = users.get(str(chat_id))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not user or not user.get("subscriptions"):
        await bot.send_message(
            chat_id,
            "‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üìö –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å—ã¬ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            reply_markup=main_menu_keyboard()
        )
        return

    session = await login(user["username"], user["password"])
    if not session:
        logging.error(f"Auth failed for user {chat_id}")
        await bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!",
            reply_markup=main_menu_keyboard()
        )
        return

    any_new = False
    ann = load_json(ANNOUNCEMENTS_FILE, {})

    for course_name in user["subscriptions"]:
        url = user["available_courses"].get(course_name)
        if not url:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        anns = await get_announcements(session, url)
        new_hash = get_course_hash(anns)
        record = ann.get(url, {})

        # –ï—Å–ª–∏ —Ö–µ—à –∏–∑–º–µ–Ω–∏–ª—Å—è - –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if new_hash != record.get("page_hash"):
            any_new = True
            ann[url] = {"page_hash": new_hash, "last_found": int(time.time())}
            save_json(ANNOUNCEMENTS_FILE, ann)
            await bot.send_message(chat_id, f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ¬´{course_name}¬ª!")

    await session.close()

    if not any_new:
        await bot.send_message(
            chat_id,
            "‚úÖ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.",
            reply_markup=main_menu_keyboard()
        )


@router.message(lambda m: m.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def manual_check(message: Message):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    users = load_json(USER_DATA_FILE, {})
    if str(message.chat.id) not in users:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login",
            reply_markup=login_keyboard()
        )
        return

    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    await check_and_notify(message.chat.id, message.bot)