from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup  # –î–æ–±–∞–≤–ª–µ–Ω StatesGroup
from aiogram.filters import Command, StateFilter  # –î–æ–±–∞–≤–ª–µ–Ω StateFilter
from config import SCHEDULE_FILE
import csv
from datetime import datetime, timedelta
from keyboards.reply import main_menu_keyboard, period_keyboard

router = Router()


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º StatesGroup –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã FSM
class ScheduleStates(StatesGroup):
    waiting_for_group = State()
    waiting_for_period = State()
    waiting_for_type = State()


@router.message(F.text == "üìÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@router.message(Command("get_schedule"))
async def show_timetable(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º401 –∏–ª–∏ —ç201):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ScheduleStates.waiting_for_group)


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º StateFilter –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.message(StateFilter(ScheduleStates.waiting_for_group))
async def process_group(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    group = message.text.strip().lower()
    await state.update_data(group=group)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=period_keyboard()
    )
    await state.set_state(ScheduleStates.waiting_for_period)


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@router.message(StateFilter(ScheduleStates.waiting_for_period))
async def process_period(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    period = message.text.strip()
    valid_periods = ["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–í—Å–µ"]

    if period not in valid_periods:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞!", reply_markup=period_keyboard())
        return

    await state.update_data(period=period)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è (–õ–µ–∫—Ü–∏—è, –°–µ–º–∏–Ω–∞—Ä, –õ–∞–±.—Ä–∞–±–æ—Ç–∞) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ScheduleStates.waiting_for_type)


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
@router.message(Command("skip"), StateFilter(ScheduleStates.waiting_for_type))
@router.message(StateFilter(ScheduleStates.waiting_for_type))
async def process_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    type_filter = None
    if message.text != "/skip":
        type_filter = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    group = user_data.get("group", "")
    period = user_data.get("period", "–í—Å–µ")

    try:
        schedule_entries = []
        today = datetime.now().date()

        with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f, delimiter=';', quotechar='"')
            for row in reader:
                groups = [g.strip().lower() for g in row['–ì—Ä—É–ø–ø—ã'].split(',')]

                if group not in groups:
                    continue

                if type_filter and type_filter.lower() not in row['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'].lower():
                    continue

                try:
                    lesson_date = datetime.strptime(row['–î–∞—Ç–∞'], '%d.%m.%Y').date()
                except ValueError:
                    continue

                if period == "–°–µ–≥–æ–¥–Ω—è" and lesson_date != today:
                    continue
                elif period == "–ù–µ–¥–µ–ª—è":
                    week_end = today + timedelta(days=7)
                    if lesson_date < today or lesson_date > week_end:
                        continue
                elif period == "–ú–µ—Å—è—Ü" and (lesson_date.month != today.month or lesson_date.year != today.year):
                    continue

                schedule_entries.append({
                    'date': row['–î–∞—Ç–∞'],
                    'time': row['–í—Ä–µ–º—è'],
                    'audience': row['–ê—É–¥–∏—Ç–æ—Ä–∏—è'],
                    'subject': row['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'],
                    'type': row['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è'],
                    'teacher': row['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏']
                })

        if not schedule_entries:
            await message.answer(
                "–ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                reply_markup=main_menu_keyboard()
            )
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏
        MAX_MESSAGE_LENGTH = 4096
        response_parts = []
        current_part = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.upper()} ({period}):\n"

        for entry in schedule_entries:
            entry_text = (
                f"\nüóì {entry['date']} | üïí {entry['time']} | üè´ {entry['audience']}"
                f"\nüìö {entry['type']}: {entry['subject']}"
                f"\nüë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry['teacher']}\n"
                f"{'-' * 30}"
            )

            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_part) + len(entry_text) > MAX_MESSAGE_LENGTH:
                response_parts.append(current_part)
                current_part = entry_text
            else:
                current_part += entry_text

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        response_parts.append(current_part)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for part in response_parts[:-1]:
            await message.answer(part)

        # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            response_parts[-1],
            reply_markup=main_menu_keyboard()
        )

    except FileNotFoundError:
        await message.answer(
            "–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏.",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=main_menu_keyboard()
        )
    finally:
        await state.clear()