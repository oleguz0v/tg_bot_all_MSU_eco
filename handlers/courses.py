import time
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from utils.storage import load_json, save_json
from utils.auth import login
from utils.parser import get_courses, get_announcements
from utils.hashing import get_course_hash
from config import USER_DATA_FILE, ANNOUNCEMENTS_FILE
from keyboards.reply import main_menu_keyboard, login_keyboard

router = Router()


async def send_course_selection_keyboard(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –≤ —Ñ–∞–π–ª."""
    chat_id = message.chat.id
    users_data = load_json(USER_DATA_FILE, {})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if str(chat_id) not in users_data:
        await message.answer(
            "‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é /login",
            reply_markup=login_keyboard()
        )
        return

    user = users_data[str(chat_id)]
    user["manual_state"] = None
    user.pop("temp_url", None)
    save_json(USER_DATA_FILE, users_data)

    username, password = user["username"], user["password"]
    session = await login(username, password)

    if not session:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!",
            reply_markup=main_menu_keyboard()
        )
        return

    courses = await get_courses(session)
    await session.close()

    if not courses:
        await message.answer(
            "‚ö†Ô∏è –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user["available_courses"] = courses
    users_data[str(chat_id)] = user
    save_json(USER_DATA_FILE, users_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    names = list(courses.keys())
    course_buttons = [
        [KeyboardButton(text=name) for name in names[i: i + 2]]
        for i in range(0, len(names), 2)
    ]
    course_buttons.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é")])
    course_buttons.append([KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")])

    kb = ReplyKeyboardMarkup(keyboard=course_buttons, resize_keyboard=True)
    await message.answer(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã</b> (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ)\n"
        "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª:",
        reply_markup=kb,
        parse_mode="HTML"
    )


@router.message(lambda m: m.text in load_json(USER_DATA_FILE, {}).get(str(m.chat.id), {}).get("available_courses", {}))
async def toggle_course_subscription(message: Message):
    chat_id = str(message.chat.id)
    users = load_json(USER_DATA_FILE, {})
    user = users[chat_id]
    course_name = message.text
    course_url = user.get("available_courses", {}).get(course_name)

    if course_name in user.get("subscriptions", []):
        user["subscriptions"].remove(course_name)
        text = f"‚ùå –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç ¬´{course_name}¬ª"
    else:
        user.setdefault("subscriptions", []).append(course_name)
        text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ¬´{course_name}¬ª"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à–∞ –∫—É—Ä—Å–∞ –ø–æ–¥ –ª–æ–∫–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–æ–∫
        from utils.locks import get_lock
        url_lock = get_lock(f"url:{course_url}")
        async with url_lock:
            ann = load_json(ANNOUNCEMENTS_FILE, {})
            if course_url not in ann:
                session = await login(user["username"], user["password"])
                anns = await get_announcements(session, course_url)
                await session.close()
                h = get_course_hash(anns)
                ann[course_url] = {"page_hash": h, "last_found": int(time.time())}
                save_json(ANNOUNCEMENTS_FILE, ann)

    save_json(USER_DATA_FILE, users)
    await message.answer(text)


@router.message(lambda m: m.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def finish_course_selection(message: Message):
    chat_id = str(message.chat.id)
    users = load_json(USER_DATA_FILE, {})
    user = users.get(chat_id)
    if not user or not user.get("subscriptions"):
        return await message.answer("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.", reply_markup=main_menu_keyboard())
    user["state"] = "main_menu"
    user["manual_state"] = None
    user.pop("temp_url", None)
    save_json(USER_DATA_FILE, users)
    from keyboards.reply import main_menu_keyboard
    await message.answer(
        "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—É—Ä—Å–∞–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç!",
        reply_markup=main_menu_keyboard()
    )


@router.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é")
async def ask_manual_url(message: Message):
    """–®–∞–≥ 1: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ URL."""
    uid = str(message.chat.id)
    users = load_json(USER_DATA_FILE, {})
    if uid not in users:
        return await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ /login", reply_markup=main_menu_keyboard())
    users[uid]["manual_state"] = "awaiting_url"
    save_json(USER_DATA_FILE, users)
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ URL –∫—É—Ä—Å–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://on.econ.msu.ru/course/view.php?id=):"
    )


@router.message(lambda m:
                load_json(USER_DATA_FILE, {})
                .get(str(m.chat.id), {})
                .get("manual_state") == "awaiting_url"
                )
async def process_manual_url(message: Message):
    """–®–∞–≥ 2: –ø–æ–ª—É—á–∏–ª–∏ URL, –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∏ —Å—Ä–∞–∑—É –ø–æ–¥–ø–∏—Å–∞–ª–∏ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    uid = str(message.chat.id)
    users = load_json(USER_DATA_FILE, {})
    user = users[uid]

    url = message.text.strip()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not url.startswith("https://on.econ.msu.ru/course/view.php?id="):
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: –¥–µ—Ä–≥–∞–µ–º –∞–Ω–æ–Ω—Å—ã
    session = await login(user["username"], user["password"])
    if not session:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    anns = await get_announcements(session, url)
    await session.close()

    if len(anns) < 1:
        return await message.answer("‚ùå –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

    # —Å—Ç—Ä–æ–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É URL‚Üíname
    global_courses = {
        uurl: nm
        for u in users.values()
        for nm, uurl in u.get("available_courses", {}).items()
    }

    # –ï—Å–ª–∏ URL —É–∂–µ –µ—Å—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑–µ ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥–ø–∏—à–µ–º –ø–æ–¥ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º
    if url in global_courses:
        name = global_courses[url]
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ user.available_courses –∏ –ø–æ–¥–ø–∏—Å–∫–∏
        user.setdefault("available_courses", {})[name] = url
        if name not in user.setdefault("subscriptions", []):
            user["subscriptions"].append(name)
        users[uid] = user
        save_json(USER_DATA_FILE, users)
        return await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ¬´{name}¬ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

    # –∏–Ω–∞—á–µ ‚Äî –Ω–æ–≤—ã–π –∫—É—Ä—Å, –Ω—É–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è
    user["temp_url"] = url
    user["manual_state"] = "awaiting_name"
    users[uid] = user
    save_json(USER_DATA_FILE, users)
    await message.answer("‚úèÔ∏è URL –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@router.message(lambda m:
                load_json(USER_DATA_FILE, {})
                .get(str(m.chat.id), {})
                .get("manual_state") == "awaiting_name"
                )
async def process_manual_name(message: Message):
    """–®–∞–≥ 3: –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å."""
    uid = str(message.chat.id)
    users = load_json(USER_DATA_FILE, {})
    user = users[uid]

    name = message.text.strip()
    url = user.get("temp_url")
    if not url:
        user["manual_state"] = None
        save_json(USER_DATA_FILE, users)
        return await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user.available_courses + –ø–æ–¥–ø–∏—Å–∫–∏
    user.setdefault("available_courses", {})[name] = url
    if name not in user.setdefault("subscriptions", []):
        user["subscriptions"].append(name)

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º announcements.json –ø–æ–¥ –ª–æ–∫–æ–º
    from utils.locks import get_lock
    url_lock = get_lock(f"url:{url}")
    async with url_lock:
        ann = load_json(ANNOUNCEMENTS_FILE, {})
        if url not in ann:
            session = await login(user["username"], user["password"])
            anns = await get_announcements(session, url)
            await session.close()
            h = get_course_hash(anns)
            ann[url] = {"page_hash": h, "last_found": int(time.time())}
            save_json(ANNOUNCEMENTS_FILE, ann)

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π state –∏ url
    user["manual_state"] = None
    user.pop("temp_url", None)
    users[uid] = user
    save_json(USER_DATA_FILE, users)

    await message.answer(f"‚úÖ –ö—É—Ä—Å ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")

    # –≤–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    await send_course_selection_keyboard(message)